{"version":3,"file":"login-sdk-web3-onboard.cjs.production.min.js","sources":["../src/index.ts"],"sourcesContent":["import { AmbireLogoSVG, AmbireLoginSDK, sdkParamsType } from '@ambire/login-sdk-core'\nimport { createEIP1193Provider, WalletInit, TransactionObject } from '@web3-onboard/common'\n\nexport function AmbireWalletModule(sdkParams: sdkParamsType): WalletInit {\n    const ambireSDK = new AmbireLoginSDK(sdkParams)\n\n    let connectedAccounts: string[] = []\n    let connectedchain: string = '0x1'\n\n    const handleLogin = async () => {\n        ambireSDK.openLogin({chainId: parseInt(connectedchain)})\n\n        return new Promise((resolve, reject) => {\n            ambireSDK.onLoginSuccess((data: any) => {\n                connectedAccounts = [data.address]\n                connectedchain = `0x${parseInt(data.chainId).toString(16)}`\n                resolve(connectedAccounts)\n            })\n\n            ambireSDK.onAlreadyLoggedIn((data: any) => {\n                connectedAccounts = [data.address]\n                connectedchain = `0x${parseInt(data.chainId).toString(16)}`\n                resolve(connectedAccounts)\n            })\n\n            ambireSDK.onRegistrationSuccess((data: any) => {\n                connectedAccounts = [data.address]\n                connectedchain = `0x${parseInt(data.chainId).toString(16)}`\n                resolve(connectedAccounts)\n            })\n\n            ambireSDK.onActionRejected((data: any) => {\n                connectedAccounts = [data.address]\n                reject({ code: 4001, message: 'User rejected the request.' })\n            })\n        })\n    }\n\n    const handleSignMessage = async (signType: string, message: string) => {\n        ambireSDK.openSignMessage(signType, message)\n\n        return new Promise((resolve, reject) => {\n            ambireSDK.onMsgSigned((data: any) => {\n                return resolve(data.signature)\n            })\n\n            ambireSDK.onMsgRejected(() => {\n                reject({ code: 4001, message: 'User rejected the request.' })\n            })\n        })\n    }\n\n    const handleSignTransaction = async (transactionObject: TransactionObject) => {\n        const txTo: string = transactionObject.to.toString()\n        const txValue: string = transactionObject.value ? transactionObject.value.toString() : '0x'\n        const txData: string = transactionObject.data ? transactionObject.data.toString() : '0x'\n\n        ambireSDK.openSendTransaction(txTo, txValue, txData)\n\n        return new Promise((resolve, reject) => {\n            ambireSDK.onTxnSent((data: any) => {\n                return resolve(data.hash)\n            })\n\n            ambireSDK.onTxnRejected(() => {\n                reject({ code: 4001, message: 'User rejected the request.' })\n            })\n        })\n    }\n\n    return () => {\n        return {\n            label: 'Ambire Wallet',\n            getIcon: async () => AmbireLogoSVG.default,\n            getInterface: async ({ EventEmitter }) => {\n                const emitter = new EventEmitter()\n\n                const requestPatch: any = {\n                    eth_requestAccounts: async () => {\n                        if (connectedAccounts.length > 0) {\n                            return Promise.resolve(connectedAccounts)\n                        }\n\n                        return handleLogin()\n                    },\n                    eth_selectAccounts: async () => {\n                        if (connectedAccounts.length > 0) {\n                            return Promise.resolve(connectedAccounts)\n                        }\n\n                        return handleLogin()\n                    },\n                    eth_accounts: async () => {\n                        return Promise.resolve(connectedAccounts)\n                    },\n                    eth_chainId: async () => {\n                        return Promise.resolve(connectedchain)\n                    },\n                    // @ts-ignore\n                    personal_sign: async ({ params: [message, address] }) => {\n                        return handleSignMessage('personal_sign', message)\n                    },\n                    // @ts-ignore\n                    eth_sign: async ({ params: [address, message] }) => {\n                        return handleSignMessage('eth_sign', message)\n                    },\n                    // @ts-ignore\n                    eth_signTypedData: async ({ params: [address, typedData] }) => {\n                        return handleSignMessage('eth_signTypedData', typedData)\n                    },\n                    // @ts-ignore\n                    eth_signTypedData_v4: async ({ params: [address, typedData] }) => {\n                        return handleSignMessage('eth_signTypedData_v4', typedData)\n                    },\n                    // @ts-ignore\n                    eth_sendTransaction: async ({ params: [transactionObject] }) => {\n                        const txTo: string = transactionObject.to.toString()\n                        const txValue: string = transactionObject.value.toString()\n                        const txData: string = transactionObject.data ? transactionObject.data.toString() : '0x'\n\n                        ambireSDK.openSendTransaction(txTo, txValue, txData)\n\n                        return new Promise((resolve, reject) => {\n                            ambireSDK.onTxnSent((data: any) => {\n                                return resolve(data.hash)\n                            })\n\n                            ambireSDK.onTxnRejected(() => {\n                                reject({ code: 4001, message: 'User rejected the request.' })\n                            })\n                        })\n                    },\n                    // @ts-ignore\n                    eth_sendTransaction: async ({ params: [transactionObject] }) => {\n                        return handleSignTransaction(transactionObject)\n                    },\n                    // @ts-ignore\n                    eth_signTransaction: async ({ params: [transactionObject] }) => {\n                        return handleSignTransaction(transactionObject)\n                    },\n                }\n\n                const provider = createEIP1193Provider({\n                    on: emitter.on.bind(emitter),\n                    disconnect: () => {\n                        ambireSDK.openLogout()                      \n                        ambireSDK.onLogoutSuccess(() => {\n                            connectedAccounts = []\n                        })\n                    }\n                }, requestPatch)\n\n                return {\n                    provider\n                }\n            },\n            platforms: ['all']\n        }\n    }\n}\n"],"names":["sdkParams","ambireSDK","AmbireLoginSDK","connectedAccounts","connectedchain","handleLogin","openLogin","chainId","parseInt","Promise","resolve","reject","onLoginSuccess","data","address","toString","onAlreadyLoggedIn","onRegistrationSuccess","onActionRejected","code","message","handleSignMessage","signType","openSignMessage","onMsgSigned","signature","onMsgRejected","handleSignTransaction","transactionObject","txTo","to","txValue","value","txData","openSendTransaction","onTxnSent","hash","onTxnRejected","label","getIcon","AmbireLogoSVG","default","getInterface","EventEmitter","emitter","requestPatch","eth_requestAccounts","length","eth_selectAccounts","eth_accounts","eth_chainId","personal_sign","params","eth_sign","eth_signTypedData","typedData","eth_signTypedData_v4","eth_sendTransaction","eth_signTransaction","provider","createEIP1193Provider","on","bind","disconnect","openLogout","onLogoutSuccess","platforms"],"mappings":"8eAGmCA,GAC/B,IAAMC,EAAY,IAAIC,iBAAeF,GAEjCG,EAA8B,GAC9BC,EAAyB,MAEvBC,aAAW,SAAG,YAGhB,OAFAJ,EAAUK,UAAU,CAACC,QAASC,SAASJ,KAEhC,IAAIK,QAAQ,CAACC,EAASC,KACzBV,EAAUW,eAAgBC,IACtBV,EAAoB,CAACU,EAAKC,SAC1BV,OAAsBI,SAASK,EAAKN,SAASQ,SAAS,IACtDL,EAAQP,KAGZF,EAAUe,kBAAmBH,IACzBV,EAAoB,CAACU,EAAKC,SAC1BV,OAAsBI,SAASK,EAAKN,SAASQ,SAAS,IACtDL,EAAQP,KAGZF,EAAUgB,sBAAuBJ,IAC7BV,EAAoB,CAACU,EAAKC,SAC1BV,OAAsBI,SAASK,EAAKN,SAASQ,SAAS,IACtDL,EAAQP,KAGZF,EAAUiB,iBAAkBL,IACxBV,EAAoB,CAACU,EAAKC,SAC1BH,EAAO,CAAEQ,KAAM,KAAMC,QAAS,sCAGzC,kBA3BgB,mCA6BXC,aAAiB,SAAG,UAAOC,EAAkBF,GAG/C,OAFAnB,EAAUsB,gBAAgBD,EAAUF,GAE7B,IAAIX,QAAQ,CAACC,EAASC,KACzBV,EAAUuB,YAAaX,GACZH,EAAQG,EAAKY,YAGxBxB,EAAUyB,cAAc,KACpBf,EAAO,CAAEQ,KAAM,KAAMC,QAAS,sCAGzC,qBAZsB,mCAcjBO,aAAqB,SAAG,UAAOC,GACjC,IAAMC,EAAeD,EAAkBE,GAAGf,WACpCgB,EAAkBH,EAAkBI,MAAQJ,EAAkBI,MAAMjB,WAAa,KACjFkB,EAAiBL,EAAkBf,KAAOe,EAAkBf,KAAKE,WAAa,KAIpF,OAFAd,EAAUiC,oBAAoBL,EAAME,EAASE,GAEtC,IAAIxB,QAAQ,CAACC,EAASC,KACzBV,EAAUkC,UAAWtB,GACVH,EAAQG,EAAKuB,OAGxBnC,EAAUoC,cAAc,KACpB1B,EAAO,CAAEQ,KAAM,KAAMC,QAAS,sCAGzC,mBAhB0B,mCAkB3B,MAAO,KACH,MAAO,CACHkB,MAAO,gBACPC,cAAS,YAAA,OAAYC,gBAAcC,WAAO,WAAA,iCAC1CC,mBAAc,wCAAOC,aAAEA,KACbC,EAAU,IAAID,EAEdE,EAAoB,CACtBC,0BAAqB,YACjB,OAAI3C,EAAkB4C,OAAS,EACpBtC,QAAQC,QAAQP,GAGpBE,OACV,WAAA,iCACD2C,yBAAoB,YAChB,OAAI7C,EAAkB4C,OAAS,EACpBtC,QAAQC,QAAQP,GAGpBE,OACV,WAAA,iCACD4C,mBAAc,YACV,OAAOxC,QAAQC,QAAQP,MAC1B,WAAA,iCACD+C,kBAAa,YACT,OAAOzC,QAAQC,QAAQN,MAC1B,WAAA,iCAED+C,oBAAe,iBAASC,QAAShC,EAASN,MACtC,OAAOO,EAAkB,gBAAiBD,MAC7C,YAAA,iCAEDiC,eAAU,iBAASD,QAAStC,EAASM,MACjC,OAAOC,EAAkB,WAAYD,MACxC,YAAA,iCAEDkC,wBAAmB,iBAASF,QAAStC,EAASyC,MAC1C,OAAOlC,EAAkB,oBAAqBkC,MACjD,YAAA,iCAEDC,2BAAsB,iBAASJ,QAAStC,EAASyC,MAC7C,OAAOlC,EAAkB,uBAAwBkC,MACpD,YAAA,iCAEDE,0BAAqB,iBAASL,QAASxB,MAC7BC,EAAeD,EAAkBE,GAAGf,WACpCgB,EAAkBH,EAAkBI,MAAMjB,WAC1CkB,EAAiBL,EAAkBf,KAAOe,EAAkBf,KAAKE,WAAa,KAIpF,OAFAd,EAAUiC,oBAAoBL,EAAME,EAASE,GAEtC,IAAIxB,QAAQ,CAACC,EAASC,KACzBV,EAAUkC,UAAWtB,GACVH,EAAQG,EAAKuB,OAGxBnC,EAAUoC,cAAc,KACpB1B,EAAO,CAAEQ,KAAM,KAAMC,QAAS,sCAGzC,YAAA,iCAEDqC,0BAAqB,iBAASL,QAASxB,MACnC,OAAOD,EAAsBC,MAChC,YAAA,iCAED8B,0BAAqB,iBAASN,QAASxB,MACnC,OAAOD,EAAsBC,MAChC,YAAA,kCAaL,MAAO,CACH+B,SAXaC,wBAAsB,CACnCC,GAAIjB,EAAQiB,GAAGC,KAAKlB,GACpBmB,WAAY,KACR9D,EAAU+D,aACV/D,EAAUgE,gBAAgB,KACtB9D,EAAoB,OAG7B0C,OAKN,YAAA,iCACDqB,UAAW,CAAC"}