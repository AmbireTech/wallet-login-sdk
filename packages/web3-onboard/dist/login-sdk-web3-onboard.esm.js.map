{"version":3,"file":"login-sdk-web3-onboard.esm.js","sources":["../src/index.ts"],"sourcesContent":["import { AmbireLogoSVG, AmbireLoginSDK, sdkParamsType } from '@ambire/login-sdk-core'\nimport { createEIP1193Provider, WalletInit } from '@web3-onboard/common'\n\nexport function AmbireWalletModule(sdkParams: sdkParamsType): WalletInit {\n    const ambireSDK = new AmbireLoginSDK(sdkParams)\n\n    let connectedAccounts: string[] = []\n    let connectedchain: string = '0x1'\n\n    const handleLogin = async () => {\n        ambireSDK.openLogin({chainId: parseInt(connectedchain)})\n\n        return new Promise((resolve, reject) => {\n            ambireSDK.onLoginSuccess((data: any) => {\n                connectedAccounts = [data.address]\n                connectedchain = `0x${parseInt(data.chainId).toString(16)}`\n                resolve(connectedAccounts)\n            })\n\n            ambireSDK.onAlreadyLoggedIn((data: any) => {\n                connectedAccounts = [data.address]\n                connectedchain = `0x${parseInt(data.chainId).toString(16)}`\n                resolve(connectedAccounts)\n            })\n\n            ambireSDK.onRegistrationSuccess((data: any) => {\n                connectedAccounts = [data.address]\n                connectedchain = `0x${parseInt(data.chainId).toString(16)}`\n                resolve(connectedAccounts)\n            })\n\n            ambireSDK.onActionRejected((data: any) => {\n                connectedAccounts = [data.address]\n                reject({ code: 4001, message: 'User rejected the request.' })\n            })\n        })\n    }\n\n    const handleSignMessage = async (signType: string, message: string) => {\n        ambireSDK.openSignMessage(signType, message)\n\n        return new Promise((resolve, reject) => {\n            ambireSDK.onMsgSigned((data: any) => {\n                return resolve(data.signature)\n            })\n\n            ambireSDK.onMsgRejected(() => {\n                reject({ code: 4001, message: 'User rejected the request.' })\n            })\n        })\n    }\n\n    return () => {\n        return {\n            label: 'Ambire Wallet',\n            getIcon: async () => AmbireLogoSVG.default,\n            getInterface: async ({ EventEmitter }) => {\n                const emitter = new EventEmitter()\n\n                const requestPatch: any = {\n                    eth_requestAccounts: async () => {\n                        if (connectedAccounts.length > 0) {\n                            return Promise.resolve(connectedAccounts)\n                        }\n\n                        return handleLogin()\n                    },\n                    eth_selectAccounts: async () => {\n                        if (connectedAccounts.length > 0) {\n                            return Promise.resolve(connectedAccounts)\n                        }\n\n                        return handleLogin()\n                    },\n                    eth_accounts: async () => {\n                        return Promise.resolve(connectedAccounts)\n                    },\n                    eth_chainId: async () => {\n                        return Promise.resolve(connectedchain)\n                    },\n                    // @ts-ignore\n                    personal_sign: async ({ params: [message, address] }) => {\n                        return handleSignMessage('personal_sign', message)\n                    },\n                    // @ts-ignore\n                    eth_sign: async ({ params: [address, message] }) => {\n                        return handleSignMessage('eth_sign', message)\n                    },\n                    // @ts-ignore\n                    eth_signTypedData: async ({ params: [address, typedData] }) => {\n                        return handleSignMessage('eth_signTypedData', typedData)\n                    },\n                    // @ts-ignore\n                    eth_signTypedData_v4: async ({ params: [address, typedData] }) => {\n                        return handleSignMessage('eth_signTypedData_v4', typedData)\n                    },\n                    // @ts-ignore\n                    eth_sendTransaction: async ({ params: [transactionObject] }) => {\n                        const txTo: string = transactionObject.to.toString()\n                        const txValue: string = transactionObject.value.toString()\n                        const txData: string = transactionObject.data ? transactionObject.data.toString() : '0x'\n\n                        ambireSDK.openSendTransaction(txTo, txValue, txData)\n\n                        return new Promise((resolve, reject) => {\n                            ambireSDK.onTxnSent((data: any) => {\n                                return resolve(data.hash)\n                            })\n\n                            ambireSDK.onTxnRejected(() => {\n                                reject({ code: 4001, message: 'User rejected the request.' })\n                            })\n                        })\n                    },\n                }\n\n                const provider = createEIP1193Provider({\n                    on: emitter.on.bind(emitter),\n                    disconnect: () => {\n                        ambireSDK.openLogout()                      \n                        ambireSDK.onLogoutSuccess(() => {\n                            connectedAccounts = []\n                        })\n                    }\n                }, requestPatch)\n\n                return {\n                    provider\n                }\n            },\n            platforms: ['all']\n        }\n    }\n}\n"],"names":["AmbireWalletModule","sdkParams","ambireSDK","AmbireLoginSDK","connectedAccounts","connectedchain","handleLogin","openLogin","chainId","parseInt","Promise","resolve","reject","onLoginSuccess","data","address","toString","onAlreadyLoggedIn","onRegistrationSuccess","onActionRejected","code","message","handleSignMessage","signType","openSignMessage","onMsgSigned","signature","onMsgRejected","label","getIcon","AmbireLogoSVG","default","getInterface","EventEmitter","emitter","requestPatch","eth_requestAccounts","length","eth_selectAccounts","eth_accounts","eth_chainId","personal_sign","params","eth_sign","eth_signTypedData","typedData","eth_signTypedData_v4","eth_sendTransaction","transactionObject","txTo","to","txValue","value","txData","openSendTransaction","onTxnSent","hash","onTxnRejected","provider","createEIP1193Provider","on","bind","disconnect","openLogout","onLogoutSuccess","platforms"],"mappings":"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"}