{"version":3,"file":"web3-react.esm.js","sources":["../src/provider.ts","../src/connector.ts"],"sourcesContent":["import { JsonRpcProvider, JsonRpcSigner } from '@ethersproject/providers'\nimport { Transaction } from '@ethersproject/transactions'\nimport { ConnectionInfo } from \"@ethersproject/web\";\nimport { Networkish } from '@ethersproject/networks'\n\nexport class AmbireProvider extends JsonRpcProvider {\n    _address: string\n    _sdk: any\n\n    constructor(sdk: any, address: string, url?: ConnectionInfo | string, network?: Networkish) {\n      super(url, network)\n      this._address = address\n      this._sdk = sdk\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n      const signerAddress = addressOrIndex ? addressOrIndex : this._address\n      const signer = super.getSigner(signerAddress)\n      const provider = this\n\n      const handler1 = {\n        get(target: any, prop: any, receiver: any) {\n          if (prop === 'sendTransaction') {\n            const value = target[prop]\n            if (value instanceof Function) {\n              return function (...args: any) {\n                const txn = args.data ? args : args[0]\n                const txnValue = txn.value ? txn.value.toString() : '0'\n\n                provider._sdk.openSendTransaction(txn.to, txnValue, txn.data)\n\n                return new Promise((resolve, reject) => {\n                  provider._sdk.onTxnSent(async (data: any) => {\n                    const hash = data.hash\n\n                    // if the txn is submitted, try to fetch it until success\n                    let fetchedTx = null\n                    let failed = 0\n                    while (fetchedTx === null && failed < 5) {\n                      fetchedTx = await provider.getTransaction(hash)\n                      if (fetchedTx === null) {\n                        await new Promise((r) => setTimeout(r, 1500))\n                        failed++\n                      }\n                    }\n\n                    const response = provider._wrapTransaction(fetchedTx as Transaction, hash)\n                    response.data = txn.data\n                    return resolve(response)\n                  })\n                  provider._sdk.onTxnRejected(() => {\n                    reject({ code: 4001 })\n                  })\n                })\n              }\n            }\n          }\n\n          if (prop === 'connectUnchecked') {\n            const value = target[prop]\n            if (value instanceof Function) {\n              return function () {\n                return new Proxy(signer, handler1)\n              }\n            }\n          }\n\n          if (prop === 'signMessage' || prop === '_legacySignMessage' || prop === '_signTypedData') {\n            const value = target[prop]\n            if (value instanceof Function) {\n              return function (...args: any) {\n                const type =\n                  prop === 'signMessage'\n                    ? 'personal_sign'\n                    : prop === '_legacySignMessage'\n                    ? 'eth_sign'\n                    : 'eth_signTypedData_v4'\n                return provider.handleMsgSign(type, args)\n              }\n            }\n          }\n\n          return Reflect.get(target, prop, receiver)\n        },\n      }\n\n      return new Proxy(signer, handler1)\n    }\n\n    handleMsgSign(type: string, args: any) {\n      const message = args.length === 1 ? args[0] : args\n      this._sdk.openSignMessage(type, message)\n\n      return new Promise((resolve, reject) => {\n        this._sdk.msgSigned(() => {\n          return resolve(args[0])\n        })\n        this._sdk.onMsgRejected(() => {\n          reject({ code: 4001 })\n        })\n      })\n    }\n  }","import { AmbireLoginSDK } from '@cmihaylov/core'\nimport { Actions, Connector } from '@web3-react/types'\nimport { AmbireProvider } from './provider'\n\nexport class AmbireConnector extends Connector {\n    _sdk: any\n\n    constructor(actions: Actions, options: any, onError?: (error: Error) => void) {\n        super(actions, onError)\n        this._sdk = new AmbireLoginSDK(options)\n    }\n\n    activate(chainInfo: any): Promise<void> | void {\n        this.actions.startActivation()\n        this._sdk.openLogin(chainInfo)\n\n        return new Promise((resolve, reject) => {\n            this._sdk.onAlreadyLoggedIn((data: any) => {\n            const activeChainId = chainInfo ? parseInt(chainInfo.chainId) : parseInt(data.chainId)\n            this.customProvider = this.getProvider(data.address, data.providerUrl)\n            this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n            resolve()\n            })\n            this._sdk.onLoginSuccess((data: any) => {\n            const activeChainId = chainInfo ? parseInt(chainInfo.chainId) : parseInt(data.chainId)\n            this.customProvider = this.getProvider(data.address, data.providerUrl)\n            this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n            resolve()\n            })\n            this._sdk.onRegistrationSuccess((data: any) => {\n            const activeChainId = chainInfo ? chainInfo.chainId : data.chainId\n            this.customProvider = this.getProvider(data.address, data.providerUrl)\n            this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n            resolve()\n            })\n            this._sdk.onActionRejected((data: any) => {\n            const activeChainId = parseInt(data.chainId)\n            this.customProvider = this.getProvider(data.address, data.providerUrl)\n            this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n            reject({ code: 4001, message: 'User rejected the request.' })\n            })\n        })\n    }\n\n    deactivate(): Promise<void> | void {\n        this._sdk.openLogout()\n\n        return new Promise((resolve) => {\n            this._sdk.onLogoutSuccess(() => {\n            this.customProvider = null\n            this.actions.resetState()\n            resolve()\n            })\n        })\n    }\n\n    getProvider(address: string, providerUrl: string): AmbireProvider {\n        return new AmbireProvider(this._sdk, address, providerUrl)\n    }\n}\n"],"names":["AmbireProvider","JsonRpcProvider","constructor","sdk","address","url","network","_address","_sdk","getSigner","addressOrIndex","signerAddress","signer","provider","handler1","get","target","prop","receiver","value","Function","args","txn","data","txnValue","toString","openSendTransaction","to","Promise","resolve","reject","onTxnSent","hash","fetchedTx","failed","getTransaction","r","setTimeout","response","_wrapTransaction","onTxnRejected","code","Proxy","type","handleMsgSign","Reflect","message","length","openSignMessage","msgSigned","onMsgRejected","AmbireConnector","Connector","actions","options","onError","AmbireLoginSDK","activate","chainInfo","startActivation","openLogin","onAlreadyLoggedIn","activeChainId","parseInt","chainId","customProvider","getProvider","providerUrl","update","accounts","onLoginSuccess","onRegistrationSuccess","onActionRejected","deactivate","openLogout","onLogoutSuccess","resetState"],"mappings":"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"}