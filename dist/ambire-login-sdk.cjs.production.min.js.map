{"version":3,"file":"ambire-login-sdk.cjs.production.min.js","sources":["../src/connector.ts"],"sourcesContent":["import { Actions, Connector } from '@web3-react/types'\nimport { JsonRpcProvider, JsonRpcSigner } from '@ethersproject/providers'\nimport { ConnectionInfo } from \"@ethersproject/web\";\nimport { Networkish } from '@ethersproject/networks'\n\nexport class AmbireWallet extends Connector {\n  _sdk: any\n\n  constructor(actions: Actions, options: any, onError?: (error: Error) => void) {\n    super(actions, onError)\n    this._sdk = new window.AmbireSDK(options)\n  }\n\n  activate(chainInfo: any): Promise<void> | void {\n    this.actions.startActivation()\n    this._sdk.openLogin(chainInfo)\n\n    return new Promise((resolve) => {\n      this._sdk.onAlreadyLoggedIn((data: any) => {\n        const activeChainId = chainInfo ? parseInt(chainInfo.chainId) : parseInt(data.chainId)\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        resolve()\n      })\n      this._sdk.onLoginSuccess((data: any) => {\n        const activeChainId = chainInfo ? parseInt(chainInfo.chainId) : parseInt(data.chainId)\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        resolve()\n      })\n      this._sdk.onRegistrationSuccess((data: any) => {\n        const activeChainId = chainInfo ? chainInfo.chainId : data.chainId\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        resolve()\n      })\n    })\n  }\n\n  deactivate(): Promise<void> | void {\n    this._sdk.openLogout()\n\n    return new Promise((resolve) => {\n      this._sdk.onLogoutSuccess(() => {\n        this.customProvider = null\n        this.actions.resetState()\n        resolve()\n      })\n    })\n  }\n\n  getProvider(address: string, providerUrl: string): AmbireProvider {\n    return new AmbireProvider(this._sdk, address, providerUrl)\n  }\n}\n\nclass AmbireProvider extends JsonRpcProvider {\n  _address: string\n  _sdk: any\n\n  constructor(sdk: any, address: string, url?: ConnectionInfo | string, network?: Networkish) {\n    super(url, network)\n    this._address = address\n    this._sdk = sdk\n  }\n\n  getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n    const signerAddress = addressOrIndex ? addressOrIndex : this._address\n    const signer = super.getSigner(signerAddress)\n    const provider = this\n\n    const handler1 = {\n      get(target: any, prop: any, receiver: any) {\n        if (prop === 'sendTransaction') {\n          const value = target[prop]\n          if (value instanceof Function) {\n            return function (...args: any) {\n              const txn = args.data ? args : args[0]\n              provider._sdk.openSendTransaction(txn.to, txn.value ?? '0', txn.data)\n\n              return new Promise((resolve, reject) => {\n                provider._sdk.onTxnSent(async (data: any) => {\n                  const hash = data.hash\n                  const tx = await provider.getTransaction(hash)\n                  const response = provider._wrapTransaction(tx, hash)\n                  response.data = txn.data\n                  return resolve(response)\n                })\n                provider._sdk.onTxnRejected(() => {\n                  reject({ code: 4001 })\n                })\n              })\n            }\n          }\n        }\n\n        if (prop === 'connectUnchecked') {\n          const value = target[prop]\n          if (value instanceof Function) {\n            return function () {\n              return new Proxy(signer, handler1)\n            }\n          }\n        }\n\n        if (prop === 'signMessage' || prop === '_legacySignMessage' || prop === '_signTypedData') {\n          const value = target[prop]\n          if (value instanceof Function) {\n            return function (...args: any) {\n              const type =\n                prop === 'signMessage'\n                  ? 'personal_sign'\n                  : prop === '_legacySignMessage'\n                  ? 'eth_sign'\n                  : 'eth_signTypedData_v4'\n              return provider.handleMsgSign(type, args)\n            }\n          }\n        }\n\n        return Reflect.get(target, prop, receiver)\n      },\n    }\n\n    return new Proxy(signer, handler1)\n  }\n\n  handleMsgSign(type: string, args: any) {\n    const message = args.length === 1 ? args[0] : args\n    this._sdk.openSignMessage(type, message)\n\n    return new Promise((resolve, reject) => {\n      this._sdk.msgSigned(() => {\n        return resolve(args[0])\n      })\n      this._sdk.onMsgRejected(() => {\n        reject({ code: 4001 })\n      })\n    })\n  }\n}"],"names":["AmbireWallet","actions","options","onError","_this","_sdk","window","AmbireSDK","_inheritsLoose","_proto","activate","chainInfo","this","startActivation","openLogin","Promise","resolve","_this2","onAlreadyLoggedIn","data","activeChainId","parseInt","chainId","customProvider","getProvider","address","providerUrl","update","accounts","onLoginSuccess","onRegistrationSuccess","deactivate","openLogout","_this3","onLogoutSuccess","resetState","AmbireProvider","Connector","sdk","url","network","_this4","_address","_proto2","getSigner","addressOrIndex","signer","provider","handler1","get","target","prop","receiver","Function","args","txn","openSendTransaction","to","value","reject","onTxnSent","hash","_context","getTransaction","response","_wrapTransaction","onTxnRejected","code","Proxy","type","handleMsgSign","Reflect","openSignMessage","length","_this5","msgSigned","onMsgRejected","JsonRpcProvider"],"mappings":"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"}