{"version":3,"file":"ambire-login-sdk.cjs.production.min.js","sources":["../src/connector.ts"],"sourcesContent":["import { Actions, Connector } from '@web3-react/types'\nimport { JsonRpcProvider, JsonRpcSigner } from '@ethersproject/providers'\nimport { ConnectionInfo } from \"@ethersproject/web\";\nimport { Networkish } from '@ethersproject/networks'\n\nexport class AmbireWallet extends Connector {\n  _sdk: any\n\n  constructor(actions: Actions, options: any, onError?: (error: Error) => void) {\n    super(actions, onError)\n    this._sdk = new window.AmbireSDK(options)\n  }\n\n  activate(chainInfo: any): Promise<void> | void {\n    this.actions.startActivation()\n    this._sdk.openLogin(chainInfo)\n\n    return new Promise((resolve, reject) => {\n      this._sdk.onAlreadyLoggedIn((data: any) => {\n        const activeChainId = chainInfo ? parseInt(chainInfo.chainId) : parseInt(data.chainId)\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        resolve()\n      })\n      this._sdk.onLoginSuccess((data: any) => {\n        const activeChainId = chainInfo ? parseInt(chainInfo.chainId) : parseInt(data.chainId)\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        resolve()\n      })\n      this._sdk.onRegistrationSuccess((data: any) => {\n        const activeChainId = chainInfo ? chainInfo.chainId : data.chainId\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        resolve()\n      })\n      this._sdk.onActionRejected((data: any) => {\n        const activeChainId = parseInt(data.chainId)\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        reject({ code: 4001, message: 'User rejected the request.' })\n      })\n    })\n  }\n\n  deactivate(): Promise<void> | void {\n    this._sdk.openLogout()\n\n    return new Promise((resolve) => {\n      this._sdk.onLogoutSuccess(() => {\n        this.customProvider = null\n        this.actions.resetState()\n        resolve()\n      })\n    })\n  }\n\n  getProvider(address: string, providerUrl: string): AmbireProvider {\n    return new AmbireProvider(this._sdk, address, providerUrl)\n  }\n}\n\nclass AmbireProvider extends JsonRpcProvider {\n  _address: string\n  _sdk: any\n\n  constructor(sdk: any, address: string, url?: ConnectionInfo | string, network?: Networkish) {\n    super(url, network)\n    this._address = address\n    this._sdk = sdk\n  }\n\n  getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n    const signerAddress = addressOrIndex ? addressOrIndex : this._address\n    const signer = super.getSigner(signerAddress)\n    const provider = this\n\n    const handler1 = {\n      get(target: any, prop: any, receiver: any) {\n        if (prop === 'sendTransaction') {\n          const value = target[prop]\n          if (value instanceof Function) {\n            return function (...args: any) {\n              const txn = args.data ? args : args[0]\n              const txnValue = txn.value ? txn.value.toString() : '0'\n\n              provider._sdk.openSendTransaction(txn.to, txnValue, txn.data)\n\n              return new Promise((resolve, reject) => {\n                provider._sdk.onTxnSent(async (data: any) => {\n                  const hash = data.hash\n                  const tx = await provider.getTransaction(hash)\n                  const response = provider._wrapTransaction(tx, hash)\n                  response.data = txn.data\n                  return resolve(response)\n                })\n                provider._sdk.onTxnRejected(() => {\n                  reject({ code: 4001 })\n                })\n              })\n            }\n          }\n        }\n\n        if (prop === 'connectUnchecked') {\n          const value = target[prop]\n          if (value instanceof Function) {\n            return function () {\n              return new Proxy(signer, handler1)\n            }\n          }\n        }\n\n        if (prop === 'signMessage' || prop === '_legacySignMessage' || prop === '_signTypedData') {\n          const value = target[prop]\n          if (value instanceof Function) {\n            return function (...args: any) {\n              const type =\n                prop === 'signMessage'\n                  ? 'personal_sign'\n                  : prop === '_legacySignMessage'\n                  ? 'eth_sign'\n                  : 'eth_signTypedData_v4'\n              return provider.handleMsgSign(type, args)\n            }\n          }\n        }\n\n        return Reflect.get(target, prop, receiver)\n      },\n    }\n\n    return new Proxy(signer, handler1)\n  }\n\n  handleMsgSign(type: string, args: any) {\n    const message = args.length === 1 ? args[0] : args\n    this._sdk.openSignMessage(type, message)\n\n    return new Promise((resolve, reject) => {\n      this._sdk.msgSigned(() => {\n        return resolve(args[0])\n      })\n      this._sdk.onMsgRejected(() => {\n        reject({ code: 4001 })\n      })\n    })\n  }\n}"],"names":["AmbireProvider","JsonRpcProvider","constructor","sdk","address","url","network","super","this","_address","_sdk","getSigner","addressOrIndex","signer","provider","handler1","get","target","prop","receiver","Function","args","txn","data","txnValue","value","toString","openSendTransaction","to","Promise","resolve","reject","onTxnSent","hash","tx","getTransaction","response","_wrapTransaction","onTxnRejected","code","Proxy","type","handleMsgSign","Reflect","openSignMessage","length","msgSigned","onMsgRejected","Connector","actions","options","onError","window","AmbireSDK","activate","chainInfo","startActivation","openLogin","onAlreadyLoggedIn","activeChainId","parseInt","chainId","customProvider","getProvider","providerUrl","update","accounts","onLoginSuccess","onRegistrationSuccess","onActionRejected","message","deactivate","openLogout","onLogoutSuccess","resetState"],"mappings":"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"}