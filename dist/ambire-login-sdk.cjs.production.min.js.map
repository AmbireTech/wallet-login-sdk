{"version":3,"file":"ambire-login-sdk.cjs.production.min.js","sources":["../src/connector.ts","../src/web3-onboard/ambire-wallet-module.ts"],"sourcesContent":["import { Actions, Connector } from '@web3-react/types'\nimport { JsonRpcProvider, JsonRpcSigner } from '@ethersproject/providers'\nimport { ConnectionInfo } from \"@ethersproject/web\";\nimport { Networkish } from '@ethersproject/networks'\n\nexport class AmbireWallet extends Connector {\n  _sdk: any\n\n  constructor(actions: Actions, options: any, onError?: (error: Error) => void) {\n    super(actions, onError)\n    this._sdk = new window.AmbireSDK(options)\n  }\n\n  activate(chainInfo: any): Promise<void> | void {\n    this.actions.startActivation()\n    this._sdk.openLogin(chainInfo)\n\n    return new Promise((resolve, reject) => {\n      this._sdk.onAlreadyLoggedIn((data: any) => {\n        const activeChainId = chainInfo ? parseInt(chainInfo.chainId) : parseInt(data.chainId)\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        resolve()\n      })\n      this._sdk.onLoginSuccess((data: any) => {\n        const activeChainId = chainInfo ? parseInt(chainInfo.chainId) : parseInt(data.chainId)\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        resolve()\n      })\n      this._sdk.onRegistrationSuccess((data: any) => {\n        const activeChainId = chainInfo ? chainInfo.chainId : data.chainId\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        resolve()\n      })\n      this._sdk.onActionRejected((data: any) => {\n        const activeChainId = parseInt(data.chainId)\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        reject({ code: 4001, message: 'User rejected the request.' })\n      })\n    })\n  }\n\n  deactivate(): Promise<void> | void {\n    this._sdk.openLogout()\n\n    return new Promise((resolve) => {\n      this._sdk.onLogoutSuccess(() => {\n        this.customProvider = null\n        this.actions.resetState()\n        resolve()\n      })\n    })\n  }\n\n  getProvider(address: string, providerUrl: string): AmbireProvider {\n    return new AmbireProvider(this._sdk, address, providerUrl)\n  }\n}\n\nclass AmbireProvider extends JsonRpcProvider {\n  _address: string\n  _sdk: any\n\n  constructor(sdk: any, address: string, url?: ConnectionInfo | string, network?: Networkish) {\n    super(url, network)\n    this._address = address\n    this._sdk = sdk\n  }\n\n  getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n    const signerAddress = addressOrIndex ? addressOrIndex : this._address\n    const signer = super.getSigner(signerAddress)\n    const provider = this\n\n    const handler1 = {\n      get(target: any, prop: any, receiver: any) {\n        if (prop === 'sendTransaction') {\n          const value = target[prop]\n          if (value instanceof Function) {\n            return function (...args: any) {\n              const txn = args.data ? args : args[0]\n              const txnValue = txn.value ? txn.value.toString() : '0'\n\n              provider._sdk.openSendTransaction(txn.to, txnValue, txn.data)\n\n              return new Promise((resolve, reject) => {\n                provider._sdk.onTxnSent(async (data: any) => {\n                  const hash = data.hash\n                  const tx = await provider.getTransaction(hash)\n                  const response = provider._wrapTransaction(tx, hash)\n                  response.data = txn.data\n                  return resolve(response)\n                })\n                provider._sdk.onTxnRejected(() => {\n                  reject({ code: 4001 })\n                })\n              })\n            }\n          }\n        }\n\n        if (prop === 'connectUnchecked') {\n          const value = target[prop]\n          if (value instanceof Function) {\n            return function () {\n              return new Proxy(signer, handler1)\n            }\n          }\n        }\n\n        if (prop === 'signMessage' || prop === '_legacySignMessage' || prop === '_signTypedData') {\n          const value = target[prop]\n          if (value instanceof Function) {\n            return function (...args: any) {\n              const type =\n                prop === 'signMessage'\n                  ? 'personal_sign'\n                  : prop === '_legacySignMessage'\n                  ? 'eth_sign'\n                  : 'eth_signTypedData_v4'\n              return provider.handleMsgSign(type, args)\n            }\n          }\n        }\n\n        return Reflect.get(target, prop, receiver)\n      },\n    }\n\n    return new Proxy(signer, handler1)\n  }\n\n  handleMsgSign(type: string, args: any) {\n    const message = args.length === 1 ? args[0] : args\n    this._sdk.openSignMessage(type, message)\n\n    return new Promise((resolve, reject) => {\n      this._sdk.msgSigned(() => {\n        return resolve(args[0])\n      })\n      this._sdk.onMsgRejected(() => {\n        reject({ code: 4001 })\n      })\n    })\n  }\n}","import { sdkParamsType } from '../types'\nimport AMBIRE_ICON from 'assets/ambire.png'\nimport { createEIP1193Provider, WalletInit } from '@web3-onboard/common'\n\nexport function AmbireWalletModule(sdkParams: sdkParamsType): WalletInit {\n    const ambireSDK = new window.AmbireSDK(sdkParams)\n\n    let connectedAccounts: string[] = []\n    let connectedchain: string = '0x1'\n\n    const handleLogin = async () => {\n        ambireSDK.openLogin({chainId: parseInt(connectedchain)})\n\n        return new Promise((resolve, reject) => {\n            ambireSDK.onLoginSuccess((data: any) => {\n                connectedAccounts = [data.address]\n                connectedchain = `0x${parseInt(data.chainId).toString(16)}`\n                resolve(connectedAccounts)\n            })\n\n            ambireSDK.onAlreadyLoggedIn((data: any) => {\n                connectedAccounts = [data.address]\n                connectedchain = `0x${parseInt(data.chainId).toString(16)}`\n                resolve(connectedAccounts)\n            })\n\n            ambireSDK.onRegistrationSuccess((data: any) => {\n                connectedAccounts = [data.address]\n                connectedchain = `0x${parseInt(data.chainId).toString(16)}`\n                resolve(connectedAccounts)\n            })\n\n            ambireSDK.onActionRejected((data: any) => {\n                connectedAccounts = [data.address]\n                reject({ code: 4001, message: 'User rejected the request.' })\n            })\n        })\n    }\n\n    const handleSignMessage = async (signType: string, message: string) => {\n        ambireSDK.openSignMessage(signType, message)\n\n        return new Promise((resolve, reject) => {\n            ambireSDK.onMsgSigned((data: any) => {\n                return resolve(data.signature)\n            })\n\n            ambireSDK.onMsgRejected(() => {\n                reject({ code: 4001, message: 'User rejected the request.' })\n            })\n        })\n    }\n\n    return () => {\n        return {\n            label: 'Ambire Wallet',\n            getIcon: async () => AMBIRE_ICON,\n            getInterface: async ({ EventEmitter }) => {\n                const emitter = new EventEmitter()\n\n                const requestPatch: any = {\n                    eth_requestAccounts: async () => {\n                        if (connectedAccounts.length > 0) {\n                            return Promise.resolve(connectedAccounts)\n                        }\n\n                        return handleLogin()\n                    },\n                    eth_selectAccounts: async () => {\n                        if (connectedAccounts.length > 0) {\n                            return Promise.resolve(connectedAccounts)\n                        }\n\n                        return handleLogin()\n                    },\n                    eth_accounts: async () => {\n                        return Promise.resolve(connectedAccounts)\n                    },\n                    eth_chainId: async () => {\n                        return Promise.resolve(connectedchain)\n                    },\n                    // @ts-ignore\n                    personal_sign: async ({ params: [message, address] }) => {\n                        return handleSignMessage('personal_sign', message)\n                    },\n                    // @ts-ignore\n                    eth_sign: async ({ params: [address, message] }) => {\n                        return handleSignMessage('eth_sign', message)\n                    },\n                    // @ts-ignore\n                    eth_signTypedData: async ({ params: [address, typedData] }) => {\n                        return handleSignMessage('eth_signTypedData', typedData)\n                    },\n                    // @ts-ignore\n                    eth_signTypedData_v4: async ({ params: [address, typedData] }) => {\n                        return handleSignMessage('eth_signTypedData_v4', typedData)\n                    },\n                    // @ts-ignore\n                    eth_sendTransaction: async ({ params: [transactionObject] }) => {\n                        const txTo: string = transactionObject.to.toString()\n                        const txValue: string = transactionObject.value.toString()\n                        const txData: string = transactionObject.data ? transactionObject.data.toString() : '0x'\n\n                        ambireSDK.openSendTransaction(txTo, txValue, txData)\n\n                        return new Promise((resolve, reject) => {\n                            ambireSDK.onTxnSent((data: any) => {\n                                return resolve(data.hash)\n                            })\n\n                            ambireSDK.onTxnRejected(() => {\n                                reject({ code: 4001, message: 'User rejected the request.' })\n                            })\n                        })\n                    },\n                }\n\n                const provider = createEIP1193Provider({\n                    on: emitter.on.bind(emitter),\n                }, requestPatch)\n\n                return {\n                    provider\n                }\n            },\n            platforms: ['all']\n        }\n    }\n}\n"],"names":["AmbireProvider","JsonRpcProvider","constructor","sdk","address","url","network","super","this","_address","_sdk","getSigner","addressOrIndex","signer","provider","handler1","get","target","prop","receiver","Function","args","txn","data","txnValue","value","toString","openSendTransaction","to","Promise","resolve","reject","onTxnSent","hash","tx","getTransaction","response","_wrapTransaction","onTxnRejected","code","Proxy","type","handleMsgSign","Reflect","openSignMessage","length","msgSigned","onMsgRejected","Connector","actions","options","onError","window","AmbireSDK","activate","chainInfo","startActivation","openLogin","onAlreadyLoggedIn","activeChainId","parseInt","chainId","customProvider","getProvider","providerUrl","update","accounts","onLoginSuccess","onRegistrationSuccess","onActionRejected","message","deactivate","openLogout","onLogoutSuccess","resetState","sdkParams","ambireSDK","connectedAccounts","connectedchain","handleLogin","handleSignMessage","signType","onMsgSigned","signature","label","getIcon","AMBIRE_ICON","getInterface","EventEmitter","emitter","requestPatch","eth_requestAccounts","eth_selectAccounts","eth_accounts","eth_chainId","personal_sign","params","eth_sign","eth_signTypedData","typedData","eth_signTypedData_v4","eth_sendTransaction","transactionObject","txTo","txValue","txData","createEIP1193Provider","on","bind","platforms"],"mappings":"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"}