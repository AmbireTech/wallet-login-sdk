{"version":3,"file":"ambire-login-sdk.cjs.production.min.js","sources":["../src/connector.ts"],"sourcesContent":["import { Actions, Connector } from '@web3-react/types'\nimport { BigNumber } from '@ethersproject/bignumber'\nimport { JsonRpcProvider, JsonRpcSigner } from '@ethersproject/providers'\nimport { ConnectionInfo } from \"@ethersproject/web\";\nimport { Networkish } from '@ethersproject/networks'\n\nexport class AmbireWallet extends Connector {\n  _sdk: any\n\n  constructor(actions: Actions, options: any, onError?: (error: Error) => void) {\n    super(actions, onError)\n    this._sdk = new window.AmbireSDK(options)\n  }\n\n  activate(chainInfo: any): Promise<void> | void {\n    this.actions.startActivation()\n    this._sdk.openLogin(chainInfo)\n\n    return new Promise((resolve, reject) => {\n      this._sdk.onAlreadyLoggedIn((data: any) => {\n        const activeChainId = chainInfo ? parseInt(chainInfo.chainId) : parseInt(data.chainId)\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        resolve()\n      })\n      this._sdk.onLoginSuccess((data: any) => {\n        const activeChainId = chainInfo ? parseInt(chainInfo.chainId) : parseInt(data.chainId)\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        resolve()\n      })\n      this._sdk.onRegistrationSuccess((data: any) => {\n        const activeChainId = chainInfo ? chainInfo.chainId : data.chainId\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        resolve()\n      })\n      this._sdk.onActionRejected((data: any) => {\n        const activeChainId = parseInt(data.chainId)\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        reject({ code: 4001, message: 'User rejected the request.' })\n      })\n    })\n  }\n\n  deactivate(): Promise<void> | void {\n    this._sdk.openLogout()\n\n    return new Promise((resolve) => {\n      this._sdk.onLogoutSuccess(() => {\n        this.customProvider = null\n        this.actions.resetState()\n        resolve()\n      })\n    })\n  }\n\n  getProvider(address: string, providerUrl: string): AmbireProvider {\n    return new AmbireProvider(this._sdk, address, providerUrl)\n  }\n}\n\nclass AmbireProvider extends JsonRpcProvider {\n  _address: string\n  _sdk: any\n\n  constructor(sdk: any, address: string, url?: ConnectionInfo | string, network?: Networkish) {\n    super(url, network)\n    this._address = address\n    this._sdk = sdk\n  }\n\n  getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n    const signerAddress = addressOrIndex ? addressOrIndex : this._address\n    const signer = super.getSigner(signerAddress)\n    const provider = this\n\n    const handler1 = {\n      get(target: any, prop: any, receiver: any) {\n        if (prop === 'sendTransaction') {\n          const value = target[prop]\n          if (value instanceof Function) {\n            return function (...args: any) {\n              const txn = args.data ? args : args[0]\n              const txnValue = txn.value ? (txn.value instanceof BigNumber ? txn.value.toString() : txn.value) : '0'\n\n              provider._sdk.openSendTransaction(txn.to, txnValue, txn.data)\n\n              return new Promise((resolve, reject) => {\n                provider._sdk.onTxnSent(async (data: any) => {\n                  const hash = data.hash\n                  const tx = await provider.getTransaction(hash)\n                  const response = provider._wrapTransaction(tx, hash)\n                  response.data = txn.data\n                  return resolve(response)\n                })\n                provider._sdk.onTxnRejected(() => {\n                  reject({ code: 4001 })\n                })\n              })\n            }\n          }\n        }\n\n        if (prop === 'connectUnchecked') {\n          const value = target[prop]\n          if (value instanceof Function) {\n            return function () {\n              return new Proxy(signer, handler1)\n            }\n          }\n        }\n\n        if (prop === 'signMessage' || prop === '_legacySignMessage' || prop === '_signTypedData') {\n          const value = target[prop]\n          if (value instanceof Function) {\n            return function (...args: any) {\n              const type =\n                prop === 'signMessage'\n                  ? 'personal_sign'\n                  : prop === '_legacySignMessage'\n                  ? 'eth_sign'\n                  : 'eth_signTypedData_v4'\n              return provider.handleMsgSign(type, args)\n            }\n          }\n        }\n\n        return Reflect.get(target, prop, receiver)\n      },\n    }\n\n    return new Proxy(signer, handler1)\n  }\n\n  handleMsgSign(type: string, args: any) {\n    const message = args.length === 1 ? args[0] : args\n    this._sdk.openSignMessage(type, message)\n\n    return new Promise((resolve, reject) => {\n      this._sdk.msgSigned(() => {\n        return resolve(args[0])\n      })\n      this._sdk.onMsgRejected(() => {\n        reject({ code: 4001 })\n      })\n    })\n  }\n}"],"names":["AmbireProvider","JsonRpcProvider","constructor","sdk","address","url","network","super","this","_address","_sdk","getSigner","addressOrIndex","signer","provider","handler1","get","target","prop","receiver","Function","args","txn","data","txnValue","value","BigNumber","toString","openSendTransaction","to","Promise","resolve","reject","onTxnSent","hash","tx","getTransaction","response","_wrapTransaction","onTxnRejected","code","Proxy","type","handleMsgSign","Reflect","openSignMessage","length","msgSigned","onMsgRejected","Connector","actions","options","onError","window","AmbireSDK","activate","chainInfo","startActivation","openLogin","onAlreadyLoggedIn","activeChainId","parseInt","chainId","customProvider","getProvider","providerUrl","update","accounts","onLoginSuccess","onRegistrationSuccess","onActionRejected","message","deactivate","openLogout","onLogoutSuccess","resetState"],"mappings":"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"}