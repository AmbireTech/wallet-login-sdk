{"version":3,"file":"ambire-login-sdk.cjs.development.js","sources":["../src/connector.ts","../src/web3-onboard/ambire-wallet-module.ts"],"sourcesContent":["import { Actions, Connector } from '@web3-react/types'\nimport { JsonRpcProvider, JsonRpcSigner } from '@ethersproject/providers'\nimport { ConnectionInfo } from \"@ethersproject/web\";\nimport { Networkish } from '@ethersproject/networks'\n\nexport class AmbireWallet extends Connector {\n  _sdk: any\n\n  constructor(actions: Actions, options: any, onError?: (error: Error) => void) {\n    super(actions, onError)\n    this._sdk = new window.AmbireSDK(options)\n  }\n\n  activate(chainInfo: any): Promise<void> | void {\n    this.actions.startActivation()\n    this._sdk.openLogin(chainInfo)\n\n    return new Promise((resolve, reject) => {\n      this._sdk.onAlreadyLoggedIn((data: any) => {\n        const activeChainId = chainInfo ? parseInt(chainInfo.chainId) : parseInt(data.chainId)\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        resolve()\n      })\n      this._sdk.onLoginSuccess((data: any) => {\n        const activeChainId = chainInfo ? parseInt(chainInfo.chainId) : parseInt(data.chainId)\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        resolve()\n      })\n      this._sdk.onRegistrationSuccess((data: any) => {\n        const activeChainId = chainInfo ? chainInfo.chainId : data.chainId\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        resolve()\n      })\n      this._sdk.onActionRejected((data: any) => {\n        const activeChainId = parseInt(data.chainId)\n        this.customProvider = this.getProvider(data.address, data.providerUrl)\n        this.actions.update({ chainId: activeChainId, accounts: [data.address] })\n        reject({ code: 4001, message: 'User rejected the request.' })\n      })\n    })\n  }\n\n  deactivate(): Promise<void> | void {\n    this._sdk.openLogout()\n\n    return new Promise((resolve) => {\n      this._sdk.onLogoutSuccess(() => {\n        this.customProvider = null\n        this.actions.resetState()\n        resolve()\n      })\n    })\n  }\n\n  getProvider(address: string, providerUrl: string): AmbireProvider {\n    return new AmbireProvider(this._sdk, address, providerUrl)\n  }\n}\n\nclass AmbireProvider extends JsonRpcProvider {\n  _address: string\n  _sdk: any\n\n  constructor(sdk: any, address: string, url?: ConnectionInfo | string, network?: Networkish) {\n    super(url, network)\n    this._address = address\n    this._sdk = sdk\n  }\n\n  getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n    const signerAddress = addressOrIndex ? addressOrIndex : this._address\n    const signer = super.getSigner(signerAddress)\n    const provider = this\n\n    const handler1 = {\n      get(target: any, prop: any, receiver: any) {\n        if (prop === 'sendTransaction') {\n          const value = target[prop]\n          if (value instanceof Function) {\n            return function (...args: any) {\n              const txn = args.data ? args : args[0]\n              const txnValue = txn.value ? txn.value.toString() : '0'\n\n              provider._sdk.openSendTransaction(txn.to, txnValue, txn.data)\n\n              return new Promise((resolve, reject) => {\n                provider._sdk.onTxnSent(async (data: any) => {\n                  const hash = data.hash\n                  const tx = await provider.getTransaction(hash)\n                  const response = provider._wrapTransaction(tx, hash)\n                  response.data = txn.data\n                  return resolve(response)\n                })\n                provider._sdk.onTxnRejected(() => {\n                  reject({ code: 4001 })\n                })\n              })\n            }\n          }\n        }\n\n        if (prop === 'connectUnchecked') {\n          const value = target[prop]\n          if (value instanceof Function) {\n            return function () {\n              return new Proxy(signer, handler1)\n            }\n          }\n        }\n\n        if (prop === 'signMessage' || prop === '_legacySignMessage' || prop === '_signTypedData') {\n          const value = target[prop]\n          if (value instanceof Function) {\n            return function (...args: any) {\n              const type =\n                prop === 'signMessage'\n                  ? 'personal_sign'\n                  : prop === '_legacySignMessage'\n                  ? 'eth_sign'\n                  : 'eth_signTypedData_v4'\n              return provider.handleMsgSign(type, args)\n            }\n          }\n        }\n\n        return Reflect.get(target, prop, receiver)\n      },\n    }\n\n    return new Proxy(signer, handler1)\n  }\n\n  handleMsgSign(type: string, args: any) {\n    const message = args.length === 1 ? args[0] : args\n    this._sdk.openSignMessage(type, message)\n\n    return new Promise((resolve, reject) => {\n      this._sdk.msgSigned(() => {\n        return resolve(args[0])\n      })\n      this._sdk.onMsgRejected(() => {\n        reject({ code: 4001 })\n      })\n    })\n  }\n}","import { sdkParamsType } from '../types'\nimport AMBIRE_ICON from 'assets/ambire.png'\nimport { createEIP1193Provider, WalletInit } from '@web3-onboard/common'\n\nexport function AmbireWalletModule(sdkParams: sdkParamsType): WalletInit {\n    const ambireSDK = new window.AmbireSDK(sdkParams)\n\n    let connectedAccounts: string[] = []\n    let connectedchain: string = '0x1'\n\n    const handleLogin = async () => {\n        ambireSDK.openLogin({chainId: parseInt(connectedchain)})\n\n        return new Promise((resolve, reject) => {\n            ambireSDK.onLoginSuccess((data: any) => {\n                connectedAccounts = [data.address]\n                connectedchain = `0x${parseInt(data.chainId).toString(16)}`\n                resolve(connectedAccounts)\n            })\n\n            ambireSDK.onAlreadyLoggedIn((data: any) => {\n                connectedAccounts = [data.address]\n                connectedchain = `0x${parseInt(data.chainId).toString(16)}`\n                resolve(connectedAccounts)\n            })\n\n            ambireSDK.onRegistrationSuccess((data: any) => {\n                connectedAccounts = [data.address]\n                connectedchain = `0x${parseInt(data.chainId).toString(16)}`\n                resolve(connectedAccounts)\n            })\n\n            ambireSDK.onActionRejected((data: any) => {\n                connectedAccounts = [data.address]\n                reject({ code: 4001, message: 'User rejected the request.' })\n            })\n        })\n    }\n\n    const handleSignMessage = async (signType: string, message: string) => {\n        ambireSDK.openSignMessage(signType, message)\n\n        return new Promise((resolve, reject) => {\n            ambireSDK.onMsgSigned((data: any) => {\n                return resolve(data.signature)\n            })\n\n            ambireSDK.onMsgRejected(() => {\n                reject({ code: 4001, message: 'User rejected the request.' })\n            })\n        })\n    }\n\n    return () => {\n        return {\n            label: 'Ambire Wallet',\n            getIcon: async () => AMBIRE_ICON,\n            getInterface: async ({ EventEmitter }) => {\n                const emitter = new EventEmitter()\n\n                const requestPatch: any = {\n                    eth_requestAccounts: async () => {\n                        if (connectedAccounts.length > 0) {\n                            return Promise.resolve(connectedAccounts)\n                        }\n\n                        return handleLogin()\n                    },\n                    eth_selectAccounts: async () => {\n                        if (connectedAccounts.length > 0) {\n                            return Promise.resolve(connectedAccounts)\n                        }\n\n                        return handleLogin()\n                    },\n                    eth_accounts: async () => {\n                        return Promise.resolve(connectedAccounts)\n                    },\n                    eth_chainId: async () => {\n                        return Promise.resolve(connectedchain)\n                    },\n                    // @ts-ignore\n                    personal_sign: async ({ params: [message, address] }) => {\n                        return handleSignMessage('personal_sign', message)\n                    },\n                    // @ts-ignore\n                    eth_sign: async ({ params: [address, message] }) => {\n                        return handleSignMessage('eth_sign', message)\n                    },\n                    // @ts-ignore\n                    eth_signTypedData: async ({ params: [address, typedData] }) => {\n                        return handleSignMessage('eth_signTypedData', typedData)\n                    },\n                    // @ts-ignore\n                    eth_signTypedData_v4: async ({ params: [address, typedData] }) => {\n                        return handleSignMessage('eth_signTypedData_v4', typedData)\n                    },\n                    // @ts-ignore\n                    eth_sendTransaction: async ({ params: [transactionObject] }) => {\n                        const txTo: string = transactionObject.to.toString()\n                        const txValue: string = transactionObject.value.toString()\n                        const txData: string = transactionObject.data ? transactionObject.data.toString() : '0x'\n\n                        ambireSDK.openSendTransaction(txTo, txValue, txData)\n\n                        return new Promise((resolve, reject) => {\n                            ambireSDK.onTxnSent((data: any) => {\n                                return resolve(data.hash)\n                            })\n\n                            ambireSDK.onTxnRejected(() => {\n                                reject({ code: 4001, message: 'User rejected the request.' })\n                            })\n                        })\n                    },\n                }\n\n                const provider = createEIP1193Provider({\n                    on: emitter.on.bind(emitter),\n                }, requestPatch)\n\n                return {\n                    provider\n                }\n            },\n            platforms: ['all']\n        }\n    }\n}\n"],"names":["AmbireWallet","Connector","constructor","actions","options","onError","_sdk","window","AmbireSDK","activate","chainInfo","startActivation","openLogin","Promise","resolve","reject","onAlreadyLoggedIn","data","activeChainId","parseInt","chainId","customProvider","getProvider","address","providerUrl","update","accounts","onLoginSuccess","onRegistrationSuccess","onActionRejected","code","message","deactivate","openLogout","onLogoutSuccess","resetState","AmbireProvider","JsonRpcProvider","sdk","url","network","_address","getSigner","addressOrIndex","signerAddress","signer","provider","handler1","get","target","prop","receiver","value","Function","args","txn","txnValue","toString","openSendTransaction","to","onTxnSent","hash","tx","getTransaction","response","_wrapTransaction","onTxnRejected","Proxy","type","handleMsgSign","Reflect","length","openSignMessage","msgSigned","onMsgRejected","AmbireWalletModule","sdkParams","ambireSDK","connectedAccounts","connectedchain","handleLogin","handleSignMessage","signType","onMsgSigned","signature","label","getIcon","AMBIRE_ICON","getInterface","EventEmitter","emitter","requestPatch","eth_requestAccounts","eth_selectAccounts","eth_accounts","eth_chainId","personal_sign","params","eth_sign","eth_signTypedData","typedData","eth_signTypedData_v4","eth_sendTransaction","transactionObject","txTo","txValue","txData","createEIP1193Provider","on","bind","platforms"],"mappings":"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"}